{"ast":null,"code":"var _jsxFileName = \"/home/jack/Desktop/movie_blog/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        console.log(result);\n\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            //then fetch actors in the setstate callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === 'Director');\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); //first fetch the movie\n\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, this.state.movie ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    })) : null, this.state.actors ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FourColGrid, {\n      header: 'Actors',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, this.state.actors.map((element, i) => {\n      return /*#__PURE__*/React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 32\n        }\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 62\n      }\n    }, \"No Movie Found!\") : null, this.state.loading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 39\n      }\n    }) : null, \"}\");\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/home/jack/Desktop/movie_blog/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","componentDidMount","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {API_URL, API_KEY, } from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation';\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\r\nimport Actor from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component {\r\nstate = {\r\n    movie: null,\r\n    actors:null,\r\n    directors: [],\r\n    loading: false\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.setState({ loading: true })\r\n    //first fetch the movie\r\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\r\n    this.fetchItems(endpoint);\r\n}\r\n\r\nfetchItems = (endpoint) => {\r\n    fetch(endpoint)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n        console.log(result);\r\n\r\n        if(result.status_code){\r\n            this.setState({ loading: false });\r\n        }else {\r\n            this.setState({ movie: result}, () => {\r\n                //then fetch actors in the setstate callback function\r\n                const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\r\n                fetch(endpoint)\r\n                .then(result => result.json())\r\n                .then(result => {\r\n                    const directors = result.crew.filter( (member) => member.job === 'Director');\r\n                    this.setState({\r\n                        actors: result.cast,\r\n                        directors,\r\n                        loading: false\r\n                    })\r\n                })\r\n                            \r\n            })\r\n        }\r\n    })\r\n    .catch( error => console.error('Error:',error))\r\n}\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"rmdb-movie\">\r\n                {this.state.movie ? \r\n                <div>\r\n                <Navigation movie={this.props.location.movieName}/>\r\n                <MovieInfo movie={this.state.movie} directors={this.state.directors}/>\r\n                <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\r\n                </div>\r\n                : null }\r\n                {this.state.actors ? \r\n                <div className=\"rmdb-movie-grid\">\r\n                    <FourColGrid header={'Actors'}> \r\n                    { this.state.actors.map( (element,i) => {\r\n                        return <Actor key={i} actor={element} />\r\n                    })}\r\n                    </FourColGrid>\r\n                </div>\r\n                : null }\r\n\r\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found!</h1>:null}\r\n                {this.state.loading ? <Spinner /> : null}\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie;"]},"metadata":{},"sourceType":"module"}